name: CI

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        php: [8.2, 8.3, 8.4]
        db: [mysql, pgsql, sqlite, sqlsrv, 'odbc:sqlsrv', 'dblib:sqlsrv', oci]

    steps:
      - uses: actions/checkout@v3

      - name: Cache Docker Registry
        uses: actions/cache@v3
        with:
          path: /tmp/docker-registry
          key: ${{ matrix.db }}-${{ github.ref }}-${{ github.sha }}
          restore-keys: |
            ${{ matrix.db }}-${{ github.ref }}-${{ github.sha }}
            ${{ matrix.db }}-${{ github.ref }}
            ${{ matrix.db }}-refs/head/master

      - name: Boot-up Local Docker Registry
        run: docker run -d -p 5000:5000 --restart=always --name registry -v /tmp/docker-registry:/var/lib/registry registry:2

      - name: Wait for Docker Registry
        run: npx wait-on tcp:5000

      - name: Boot-up MySQL Container
        if: matrix.db == 'mysql'
        run: |
          if [[ -z "$(docker images -q localhost:5000/mysql:latest)" ]]; then
            docker pull mysql:8.0
            docker tag mysql:8.0 localhost:5000/mysql:latest
            docker push localhost:5000/mysql:latest
          fi
          docker compose up -d mysql
          sh -c 'docker compose logs -f mysql | { sed "/\[Entrypoint\]: MySQL init process done\. Ready for start up\./ q" && kill $$ ;}' >/dev/null 2>&1 || true

      - name: Boot-up Postgres Container
        if: matrix.db == 'pgsql'
        run: |
          if [[ -z "$(docker images -q localhost:5000/postgres:latest)" ]]; then
            docker pull postgres:17
            docker tag postgres:17 localhost:5000/postgres:latest
            docker push localhost:5000/postgres:latest
          fi
          docker compose up -d postgres
          sh -c 'docker compose logs -f postgres | { sed "/PostgreSQL init process complete; ready for start up\./ q" && kill $$ ;}' >/dev/null 2>&1 || true

      - name: Boot-up SQLServer Container
        if: matrix.db == 'sqlsrv' || matrix.db == 'odbc:sqlsrv' || matrix.db == 'dblib:sqlsrv'
        run: |
          if [[ -z "$(docker images -q localhost:5000/sqlsrv)" ]]; then
            docker pull mcr.microsoft.com/mssql/server
            docker tag mcr.microsoft.com/mssql/server localhost:5000/sqlsrv
            docker push localhost:5000/sqlsrv
          fi
          docker compose up -d sqlsrv
          sh -c 'docker compose logs -f sqlsrv | { sed "/Recovery is complete\./ q" && kill $$ ;}' >/dev/null 2>&1 || true

      - name: Boot-up Oracle Container
        if: matrix.db == 'oci'
        run: |
          if [[ -z "$(docker images -q localhost:5000/oracle:latest)" ]]; then
            docker pull quay.io/maksymbilenko/oracle-12c:latest
            docker tag quay.io/maksymbilenko/oracle-12c:latest localhost:5000/oracle:latest
            docker push localhost:5000/oracle:latest
          fi
          docker compose up -d oracle
          sh -c 'docker compose logs -f oracle | { sed "/Database ready to use\./ q" && kill $$ ;}' >/dev/null 2>&1 || true

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php }}
          coverage: xdebug
          extensions: ${{ matrix.db == 'oci' && 'pdo_oci' || '' }}

      - name: Set up MySQL
        if: matrix.db == 'mysql'
        run: |
          mysql \
            --host=127.0.0.1 \
            --port=3306 \
            --user=root \
            --password=testing <<< "
              ALTER USER 'testing'@'%' IDENTIFIED WITH mysql_native_password BY 'testing';
            "

      - name: Prepare Coverage Directory
        run: mkdir -p build/logs

      - name: Prepare Dependencies
        run: composer install

      - name: Test
        run: composer test -- --coverage-clover build/logs/clover.xml
        env:
          DB: ${{ matrix.db }}

      - name: Upload Coverage
        uses: nick-invision/retry@v2
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          COVERALLS_PARALLEL: 'true'
          COVERALLS_FLAG_NAME: "db:${{ matrix.db }} php:${{ matrix.php }}"
        with:
          timeout_minutes: 1
          max_attempts: 3
          command: |
            composer global require php-coveralls/php-coveralls
            php-coveralls --coverage_clover=build/logs/clover.xml -v

  coverage-aggregation:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Aggregate Coverage
        uses: coverallsapp/github-action@master
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          parallel-finished: true
